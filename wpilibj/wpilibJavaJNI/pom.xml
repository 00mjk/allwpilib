<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <artifactId>wpilibJavaJNI</artifactId>
  <groupId>edu.wpi.first.wpilibj</groupId>
  <version>0.1.0-SNAPSHOT</version>
  <packaging>so</packaging>

  <parent>
    <groupId>edu.wpi.first.wpilib.templates.athena</groupId>
    <artifactId>shared-library</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <relativePath>../../maven-utilities/athena/shared-library/pom.xml</relativePath>
  </parent>

  <dependencies>
  	<dependency>
 		<groupId>com.ni.first.libraries</groupId>
  		<artifactId>libFRC_NetworkCommunication</artifactId>
  		<type>so</type>
  		<version>0.1.0-SNAPSHOT</version>
  	</dependency>
   	<dependency>
    	<groupId>edu.wpi.first.wpilib.hal</groupId>
  		<artifactId>libHALAthena</artifactId>
  		<version>0.1.0-SNAPSHOT</version>
  		<type>a</type>
  	</dependency>
	<dependency>
	  <groupId>edu.wpi.first.wpilib.hal</groupId>
	  <artifactId>include</artifactId>
	  <version>0.1.0-SNAPSHOT</version>
      <type>inczip</type>
    </dependency>
    <dependency>
  	<groupId>edu.wpi.first.wpilibj</groupId>
  	<artifactId>wpilibJava</artifactId>
  	<version>0.1.0-SNAPSHOT</version>
  	<type>jar</type>
  	</dependency>    
  </dependencies>
  
  <repositories>
    
  </repositories>
  <pluginRepositories>
    
  </pluginRepositories>
  
  <properties>
    <embeddedJDKHome>${user.home}/jdk-linux-arm-vfp-slft/jdk1.7.0_45</embeddedJDKHome>
    <embeddedJDKIncludePath>${embeddedJDKHome}/include</embeddedJDKIncludePath>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <id>enforce-property</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
		<requireFilesExist>
                  <files>
                   <file>${embeddedJDKIncludePath}</file>
                  </files>
		  <message>A copy of the 'Linux ARM v6/v7 Soft Float ABI' JDK must be extracted to '${embeddedJDKHome}' and
the folder '${embeddedJDKIncludePath}' must exist to build this module. You must use Java 7 u45. This JDK may be downloaded from 
http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u45-oth-JPR. To override
this default location, specify a value for the 'embeddedJDKHome' property at the command line, like 'mvn -DembeddedJDKHome=path/to/jdk'</message>
                </requireFilesExist>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>
	  <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>native-maven-plugin</artifactId>
         <version>1.0-alpha-7</version>
         <extensions>true</extensions>
         <configuration>
			<javahOS>linux</javahOS>
			<jdkIncludePath>${embeddedJDKIncludePath}</jdkIncludePath>
		  <sources>
			<source>
			  <directory>src/main/native</directory>
			  <includes>
				<include>**/*.cpp</include>
			  </includes>
			</source>
		  </sources>
        </configuration>
		<executions>
			<execution>
				<id>javah</id>
				<phase>generate-sources</phase>
				<configuration>
           			<!-- trigger javah execution -->         
           			<javahClassNames>
             			<javahClassName>edu.wpi.first.wpilibj.can.CANJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.communication.FRCNetworkCommunicationsLibrary</javahClassName>              
             			<javahClassName>edu.wpi.first.wpilibj.hal.HALUtil</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.JNIWrapper</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.AnalogJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.CounterJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.DIOJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.EncoderJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.I2CJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.InterruptJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.PWMJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.RelayJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.SPIJNI</javahClassName>
             			<javahClassName>edu.wpi.first.wpilibj.hal.WatchdogJNI</javahClassName>
             		</javahClassNames>
           			<!-- enable additional javah interface in dependencies list -->
           			<!-- javahSearchJNIFromDependencies>true</javahSearchJNIFromDependencies -->
           			<!-- 
            			| Add jdk include directories to system include path
            			| Override ${jkdIncludePath} If your jdk does not conform to Sun JDK layout
            			-->
           			<javahOS>linux</javahOS>
           			<javahOutputDirectory>${project.build.directory}/jni/include</javahOutputDirectory>
           			<javahProvider>default</javahProvider>
           			<javahVerbose>true</javahVerbose>
				</configuration>
				<goals>	
					<goal>javah</goal>
				</goals>
			</execution>
		</executions>
	  </plugin>
	  
    </plugins>
  </build>
</project>
