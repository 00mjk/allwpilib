package edu.wpi.first.wpilibj.hal;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalDouble;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalInt;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.NativeLongByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>HAL</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class HALLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("HALAthenaJava", true, HALLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(HALLibrary.JNA_LIBRARY_NAME, MangledFunctionMapper.DEFAULT_OPTIONS);
	static {
		Native.register(HALLibrary.JNA_LIBRARY_NAME);
	}
	/**
	 * <i>native declaration : target/native/include/HAL/Analog.h</i><br>
	 * enum values
	 */
	public static interface AnalogTriggerType {
		/** <i>native declaration : target/native/include/HAL/Analog.h:36</i> */
		public static final int kInWindow = 0;
		/** <i>native declaration : target/native/include/HAL/Analog.h:36</i> */
		public static final int kState = 1;
		/** <i>native declaration : target/native/include/HAL/Analog.h:36</i> */
		public static final int kRisingPulse = 2;
		/** <i>native declaration : target/native/include/HAL/Analog.h:36</i> */
		public static final int kFallingPulse = 3;
	};
	/**
	 * <i>native declaration : target/native/include/HAL/Digital.h</i><br>
	 * enum values
	 */
	public static interface Mode {
		/** <i>native declaration : target/native/include/HAL/Digital.h:42</i> */
		public static final int kTwoPulse = 0;
		/** <i>native declaration : target/native/include/HAL/Digital.h:42</i> */
		public static final int kSemiperiod = 1;
		/** <i>native declaration : target/native/include/HAL/Digital.h:42</i> */
		public static final int kPulseLength = 2;
		/** <i>native declaration : target/native/include/HAL/Digital.h:42</i> */
		public static final int kExternalDirection = 3;
	};
	/**
	 * <i>native declaration : target/native/include/HAL/Digital.h:91</i><br>
	 * enum values
	 */
	public static interface tSPIConstants {
		/** <i>native declaration : target/native/include/HAL/Digital.h:91</i> */
		public static final int kReceiveFIFODepth = 512;
		/** <i>native declaration : target/native/include/HAL/Digital.h:91</i> */
		public static final int kTransmitFIFODepth = 512;
	};
	/**
	 * <i>native declaration : target/native/include/HAL/Digital.h:92</i><br>
	 * enum values
	 */
	public static interface tFrameMode {
		/** <i>native declaration : target/native/include/HAL/Digital.h:92</i> */
		public static final int kChipSelect = 0;
		/** <i>native declaration : target/native/include/HAL/Digital.h:92</i> */
		public static final int kPreLatchPulse = 1;
		/** <i>native declaration : target/native/include/HAL/Digital.h:92</i> */
		public static final int kPostLatchPulse = 2;
		/** <i>native declaration : target/native/include/HAL/Digital.h:92</i> */
		public static final int kPreAndPostLatchPulse = 3;
	};
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String NO_AVAILABLE_RESOURCES_MESSAGE = "No available resources to allocate";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String INCOMPATIBLE_STATE_MESSAGE = "Incompatible State: The operation cannot be completed";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int SPI_WRITE_NO_MOSI = 12;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int PARAMETER_OUT_OF_RANGE = -28;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String NULL_PARAMETER_MESSAGE = "A pointer parameter to a method is NULL";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int ANALOG_TRIGGER_LIMIT_ORDER_ERROR = -10;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int INCOMPATIBLE_STATE = 15;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String VOLTAGE_OUT_OF_RANGE_MESSAGE = "Voltage to convert to raw value is out of range [-10; 10]";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int SAMPLE_RATE_TOO_HIGH = 1;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int NULL_PARAMETER = -5;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String PARAMETER_OUT_OF_RANGE_MESSAGE = "A parameter is out of range.";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String SAMPLE_RATE_TOO_HIGH_MESSAGE = "Analog module sample rate is too high";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String SPI_WRITE_NO_MOSI_MESSAGE = "Cannot write to SPI port with no MOSI output";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String LOOP_TIMING_ERROR_MESSAGE = "Digital module loop timing is not the expected value";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String ANALOG_TRIGGER_PULSE_OUTPUT_ERROR_MESSAGE = "Attempted to read AnalogTrigger pulse output.";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int ANALOG_TRIGGER_PULSE_OUTPUT_ERROR = -11;
	/** <i>native declaration : target/native/include/HAL/Task.h</i> */
	public static final int OK = 0;
	/** <i>native declaration : target/native/include/HAL/Task.h</i> */
	public static final int ERROR = (-1);
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int SPI_READ_NO_MISO = 13;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String SPI_READ_NO_MISO_MESSAGE = "Cannot read from SPI port with no MISO input";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int SPI_READ_NO_DATA = 14;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int NO_AVAILABLE_RESOURCES = -4;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String ANALOG_TRIGGER_LIMIT_ORDER_ERROR_MESSAGE = "AnalogTrigger limits error.  Lower limit > Upper Limit";
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int VOLTAGE_OUT_OF_RANGE = 2;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final int LOOP_TIMING_ERROR = 4;
	/** <i>native declaration : target/native/include/HAL/Errors.h</i> */
	public static final String SPI_READ_NO_DATA_MESSAGE = "No data available to read from SPI";
	/** <i>native declaration : target/native/include/HAL/Notifier.h:7</i> */
	public interface initializeNotifier_ProcessQueue_callback extends Callback {
		void apply(int uint32_t1, Pointer voidPtr1);
	};
	/** <i>native declaration : target/native/include/HAL/Interrupts.h</i> */
	public interface InterruptHandlerFunction extends Callback {
		void apply(int interruptAssertedMask, Pointer param);
	};
	/** <i>native declaration : target/native/include/HAL/Task.h</i> */
	public interface FUNCPTR extends Callback {
		int apply(Object... varargs);
	};
	/**
	 * Original signature : <code>void* initializeAnalogPort(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:7</i><br>
	 * @deprecated use the safer methods {@link #initializeAnalogPort(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #initializeAnalogPort(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeAnalogPort(Pointer port_pointer, IntByReference status);
	/**
	 * Original signature : <code>void* initializeAnalogPort(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:7</i>
	 */
	public static native Pointer initializeAnalogPort(Pointer port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool checkAnalogModule(uint8_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:8</i>
	 */
	public static native byte checkAnalogModule(byte module);
	/**
	 * Original signature : <code>bool checkAnalogChannel(uint32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:9</i>
	 */
	public static native byte checkAnalogChannel(int pin);
	/**
	 * Original signature : <code>void setAnalogSampleRate(float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:11</i><br>
	 * @deprecated use the safer methods {@link #setAnalogSampleRate(float, java.nio.IntBuffer)} and {@link #setAnalogSampleRate(float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogSampleRate(double samplesPerSecond, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogSampleRate(float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:11</i>
	 */
	public static native void setAnalogSampleRate(double samplesPerSecond, IntBuffer status);
	/**
	 * Original signature : <code>float getAnalogSampleRate(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:12</i><br>
	 * @deprecated use the safer methods {@link #getAnalogSampleRate(java.nio.IntBuffer)} and {@link #getAnalogSampleRate(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native float getAnalogSampleRate(IntByReference status);
	/**
	 * Original signature : <code>float getAnalogSampleRate(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:12</i>
	 */
	public static native float getAnalogSampleRate(IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogSampleRateWithModule(uint8_t, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:13</i><br>
	 * @deprecated use the safer methods {@link #setAnalogSampleRateWithModule(byte, float, java.nio.IntBuffer)} and {@link #setAnalogSampleRateWithModule(byte, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogSampleRateWithModule(byte module, double samplesPerSecond, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogSampleRateWithModule(uint8_t, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:13</i>
	 */
	public static native void setAnalogSampleRateWithModule(byte module, double samplesPerSecond, IntBuffer status);
	/**
	 * Original signature : <code>float getAnalogSampleRateWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:14</i><br>
	 * @deprecated use the safer methods {@link #getAnalogSampleRateWithModule(byte, java.nio.IntBuffer)} and {@link #getAnalogSampleRateWithModule(byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native float getAnalogSampleRateWithModule(byte module, IntByReference status);
	/**
	 * Original signature : <code>float getAnalogSampleRateWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:14</i>
	 */
	public static native float getAnalogSampleRateWithModule(byte module, IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogAverageBits(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:15</i><br>
	 * @deprecated use the safer methods {@link #setAnalogAverageBits(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setAnalogAverageBits(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogAverageBits(Pointer analog_port_pointer, int bits, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogAverageBits(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:15</i>
	 */
	public static native void setAnalogAverageBits(Pointer analog_port_pointer, int bits, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getAnalogAverageBits(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:16</i><br>
	 * @deprecated use the safer methods {@link #getAnalogAverageBits(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogAverageBits(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAnalogAverageBits(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint32_t getAnalogAverageBits(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:16</i>
	 */
	public static native int getAnalogAverageBits(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogOversampleBits(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:17</i><br>
	 * @deprecated use the safer methods {@link #setAnalogOversampleBits(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setAnalogOversampleBits(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogOversampleBits(Pointer analog_port_pointer, int bits, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogOversampleBits(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:17</i>
	 */
	public static native void setAnalogOversampleBits(Pointer analog_port_pointer, int bits, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getAnalogOversampleBits(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:18</i><br>
	 * @deprecated use the safer methods {@link #getAnalogOversampleBits(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogOversampleBits(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAnalogOversampleBits(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint32_t getAnalogOversampleBits(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:18</i>
	 */
	public static native int getAnalogOversampleBits(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>int16_t getAnalogValue(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:19</i><br>
	 * @deprecated use the safer methods {@link #getAnalogValue(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogValue(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native short getAnalogValue(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>int16_t getAnalogValue(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:19</i>
	 */
	public static native short getAnalogValue(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>int32_t getAnalogAverageValue(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:20</i><br>
	 * @deprecated use the safer methods {@link #getAnalogAverageValue(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogAverageValue(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAnalogAverageValue(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>int32_t getAnalogAverageValue(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:20</i>
	 */
	public static native int getAnalogAverageValue(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>int32_t getAnalogVoltsToValue(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:21</i><br>
	 * @deprecated use the safer methods {@link #getAnalogVoltsToValue(com.sun.jna.Pointer, float, java.nio.IntBuffer)} and {@link #getAnalogVoltsToValue(com.sun.jna.Pointer, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAnalogVoltsToValue(Pointer analog_port_pointer, double voltage, IntByReference status);
	/**
	 * Original signature : <code>int32_t getAnalogVoltsToValue(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:21</i>
	 */
	public static native int getAnalogVoltsToValue(Pointer analog_port_pointer, double voltage, IntBuffer status);
	/**
	 * Original signature : <code>float getAnalogVoltage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:22</i><br>
	 * @deprecated use the safer methods {@link #getAnalogVoltage(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogVoltage(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native float getAnalogVoltage(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>float getAnalogVoltage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:22</i>
	 */
	public static native float getAnalogVoltage(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>float getAnalogAverageVoltage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:23</i><br>
	 * @deprecated use the safer methods {@link #getAnalogAverageVoltage(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogAverageVoltage(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native float getAnalogAverageVoltage(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>float getAnalogAverageVoltage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:23</i>
	 */
	public static native float getAnalogAverageVoltage(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getAnalogLSBWeight(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:24</i><br>
	 * @deprecated use the safer methods {@link #getAnalogLSBWeight(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogLSBWeight(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAnalogLSBWeight(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint32_t getAnalogLSBWeight(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:24</i>
	 */
	public static native int getAnalogLSBWeight(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>int32_t getAnalogOffset(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:25</i><br>
	 * @deprecated use the safer methods {@link #getAnalogOffset(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogOffset(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAnalogOffset(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>int32_t getAnalogOffset(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:25</i>
	 */
	public static native int getAnalogOffset(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool isAccumulatorChannel(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:27</i><br>
	 * @deprecated use the safer methods {@link #isAccumulatorChannel(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #isAccumulatorChannel(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isAccumulatorChannel(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool isAccumulatorChannel(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:27</i>
	 */
	public static native byte isAccumulatorChannel(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void initAccumulator(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:28</i><br>
	 * @deprecated use the safer methods {@link #initAccumulator(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #initAccumulator(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void initAccumulator(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>void initAccumulator(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:28</i>
	 */
	public static native void initAccumulator(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void resetAccumulator(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:29</i><br>
	 * @deprecated use the safer methods {@link #resetAccumulator(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #resetAccumulator(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void resetAccumulator(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>void resetAccumulator(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:29</i>
	 */
	public static native void resetAccumulator(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setAccumulatorCenter(void*, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:30</i><br>
	 * @deprecated use the safer methods {@link #setAccumulatorCenter(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setAccumulatorCenter(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAccumulatorCenter(Pointer analog_port_pointer, int center, IntByReference status);
	/**
	 * Original signature : <code>void setAccumulatorCenter(void*, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:30</i>
	 */
	public static native void setAccumulatorCenter(Pointer analog_port_pointer, int center, IntBuffer status);
	/**
	 * Original signature : <code>void setAccumulatorDeadband(void*, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:31</i><br>
	 * @deprecated use the safer methods {@link #setAccumulatorDeadband(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setAccumulatorDeadband(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAccumulatorDeadband(Pointer analog_port_pointer, int deadband, IntByReference status);
	/**
	 * Original signature : <code>void setAccumulatorDeadband(void*, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:31</i>
	 */
	public static native void setAccumulatorDeadband(Pointer analog_port_pointer, int deadband, IntBuffer status);
	/**
	 * Original signature : <code>int64_t getAccumulatorValue(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:32</i><br>
	 * @deprecated use the safer methods {@link #getAccumulatorValue(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAccumulatorValue(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native long getAccumulatorValue(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>int64_t getAccumulatorValue(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:32</i>
	 */
	public static native long getAccumulatorValue(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getAccumulatorCount(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:33</i><br>
	 * @deprecated use the safer methods {@link #getAccumulatorCount(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAccumulatorCount(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getAccumulatorCount(Pointer analog_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint32_t getAccumulatorCount(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:33</i>
	 */
	public static native int getAccumulatorCount(Pointer analog_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void getAccumulatorOutput(void*, int64_t*, uint32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:34</i><br>
	 * @deprecated use the safer methods {@link #getAccumulatorOutput(com.sun.jna.Pointer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #getAccumulatorOutput(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void getAccumulatorOutput(Pointer analog_port_pointer, LongByReference value, IntByReference count, IntByReference status);
	/**
	 * Original signature : <code>void getAccumulatorOutput(void*, int64_t*, uint32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:34</i>
	 */
	public static native void getAccumulatorOutput(Pointer analog_port_pointer, LongBuffer value, IntBuffer count, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeAnalogTrigger(void*, uint32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:37</i><br>
	 * @deprecated use the safer methods {@link #initializeAnalogTrigger(com.sun.jna.Pointer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #initializeAnalogTrigger(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeAnalogTrigger(Pointer port_pointer, IntByReference index, IntByReference status);
	/**
	 * Original signature : <code>void* initializeAnalogTrigger(void*, uint32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:37</i>
	 */
	public static native Pointer initializeAnalogTrigger(Pointer port_pointer, IntBuffer index, IntBuffer status);
	/**
	 * Original signature : <code>void cleanAnalogTrigger(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:38</i><br>
	 * @deprecated use the safer methods {@link #cleanAnalogTrigger(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #cleanAnalogTrigger(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void cleanAnalogTrigger(Pointer analog_trigger_pointer, IntByReference status);
	/**
	 * Original signature : <code>void cleanAnalogTrigger(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:38</i>
	 */
	public static native void cleanAnalogTrigger(Pointer analog_trigger_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogTriggerLimitsRaw(void*, int32_t, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:39</i><br>
	 * @deprecated use the safer methods {@link #setAnalogTriggerLimitsRaw(com.sun.jna.Pointer, int, int, java.nio.IntBuffer)} and {@link #setAnalogTriggerLimitsRaw(com.sun.jna.Pointer, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogTriggerLimitsRaw(Pointer analog_trigger_pointer, int lower, int upper, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogTriggerLimitsRaw(void*, int32_t, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:39</i>
	 */
	public static native void setAnalogTriggerLimitsRaw(Pointer analog_trigger_pointer, int lower, int upper, IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogTriggerLimitsVoltage(void*, float, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:40</i><br>
	 * @deprecated use the safer methods {@link #setAnalogTriggerLimitsVoltage(com.sun.jna.Pointer, float, float, java.nio.IntBuffer)} and {@link #setAnalogTriggerLimitsVoltage(com.sun.jna.Pointer, float, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogTriggerLimitsVoltage(Pointer analog_trigger_pointer, double lower, double upper, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogTriggerLimitsVoltage(void*, float, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:40</i>
	 */
	public static native void setAnalogTriggerLimitsVoltage(Pointer analog_trigger_pointer, double lower, double upper, IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogTriggerAveraged(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:41</i><br>
	 * @deprecated use the safer methods {@link #setAnalogTriggerAveraged(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setAnalogTriggerAveraged(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogTriggerAveraged(Pointer analog_trigger_pointer, byte useAveragedValue, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogTriggerAveraged(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:41</i>
	 */
	public static native void setAnalogTriggerAveraged(Pointer analog_trigger_pointer, byte useAveragedValue, IntBuffer status);
	/**
	 * Original signature : <code>void setAnalogTriggerFiltered(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:42</i><br>
	 * @deprecated use the safer methods {@link #setAnalogTriggerFiltered(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setAnalogTriggerFiltered(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setAnalogTriggerFiltered(Pointer analog_trigger_pointer, byte useFilteredValue, IntByReference status);
	/**
	 * Original signature : <code>void setAnalogTriggerFiltered(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:42</i>
	 */
	public static native void setAnalogTriggerFiltered(Pointer analog_trigger_pointer, byte useFilteredValue, IntBuffer status);
	/**
	 * Original signature : <code>bool getAnalogTriggerInWindow(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:43</i><br>
	 * @deprecated use the safer methods {@link #getAnalogTriggerInWindow(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogTriggerInWindow(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getAnalogTriggerInWindow(Pointer analog_trigger_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getAnalogTriggerInWindow(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:43</i>
	 */
	public static native byte getAnalogTriggerInWindow(Pointer analog_trigger_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool getAnalogTriggerTriggerState(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:44</i><br>
	 * @deprecated use the safer methods {@link #getAnalogTriggerTriggerState(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getAnalogTriggerTriggerState(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getAnalogTriggerTriggerState(Pointer analog_trigger_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getAnalogTriggerTriggerState(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:44</i>
	 */
	public static native byte getAnalogTriggerTriggerState(Pointer analog_trigger_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool getAnalogTriggerOutput(void*, AnalogTriggerType, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:45</i><br>
	 * @deprecated use the safer methods {@link #getAnalogTriggerOutput(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #getAnalogTriggerOutput(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getAnalogTriggerOutput(Pointer analog_trigger_pointer, int type, IntByReference status);
	/**
	 * Original signature : <code>bool getAnalogTriggerOutput(void*, AnalogTriggerType, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Analog.h:45</i>
	 */
	public static native byte getAnalogTriggerOutput(Pointer analog_trigger_pointer, int type, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeDigitalPort(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:6</i><br>
	 * @deprecated use the safer methods {@link #initializeDigitalPort(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #initializeDigitalPort(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeDigitalPort(Pointer port_pointer, IntByReference status);
	/**
	 * Original signature : <code>void* initializeDigitalPort(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:6</i>
	 */
	public static native Pointer initializeDigitalPort(Pointer port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool checkDigitalModule(uint8_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:7</i>
	 */
	public static native byte checkDigitalModule(byte module);
	/**
	 * Original signature : <code>bool checkPWMChannel(void*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:8</i>
	 */
	public static native byte checkPWMChannel(Pointer digital_port_pointer);
	/**
	 * Original signature : <code>bool checkRelayChannel(void*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:9</i>
	 */
	public static native byte checkRelayChannel(Pointer digital_port_pointer);
	/**
	 * Original signature : <code>uint8_t remapDigitalChannel(uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:10</i><br>
	 * @deprecated use the safer methods {@link #remapDigitalChannel(int, java.nio.IntBuffer)} and {@link #remapDigitalChannel(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte remapDigitalChannel(int pin, IntByReference status);
	/**
	 * Original signature : <code>uint8_t remapDigitalChannel(uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:10</i>
	 */
	public static native byte remapDigitalChannel(int pin, IntBuffer status);
	/**
	 * Original signature : <code>uint8_t unmapDigitalChannel(uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:11</i><br>
	 * @deprecated use the safer methods {@link #unmapDigitalChannel(int, java.nio.IntBuffer)} and {@link #unmapDigitalChannel(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte unmapDigitalChannel(int pin, IntByReference status);
	/**
	 * Original signature : <code>uint8_t unmapDigitalChannel(uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:11</i>
	 */
	public static native byte unmapDigitalChannel(int pin, IntBuffer status);
	/**
	 * Original signature : <code>void setPWM(void*, uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:13</i><br>
	 * @deprecated use the safer methods {@link #setPWM(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setPWM(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWM(Pointer digital_port_pointer, short value, IntByReference status);
	/**
	 * Original signature : <code>void setPWM(void*, uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:13</i>
	 */
	public static native void setPWM(Pointer digital_port_pointer, short value, IntBuffer status);
	/**
	 * Original signature : <code>uint8_t getPWM(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:14</i><br>
	 * @deprecated use the safer methods {@link #getPWM(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getPWM(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getPWM(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint8_t getPWM(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:14</i>
	 */
	public static native byte getPWM(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMPeriodScale(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:15</i><br>
	 * @deprecated use the safer methods {@link #setPWMPeriodScale(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setPWMPeriodScale(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMPeriodScale(Pointer digital_port_pointer, int squelchMask, IntByReference status);
	/**
	 * Original signature : <code>void setPWMPeriodScale(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:15</i>
	 */
	public static native void setPWMPeriodScale(Pointer digital_port_pointer, int squelchMask, IntBuffer status);
	/**
	 * Original signature : <code>void* allocatePWM(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:16</i><br>
	 * @deprecated use the safer methods {@link #allocatePWM(java.nio.IntBuffer)} and {@link #allocatePWM(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer allocatePWM(IntByReference status);
	/**
	 * Original signature : <code>void* allocatePWM(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:16</i>
	 */
	public static native Pointer allocatePWM(IntBuffer status);
	/**
	 * Original signature : <code>void* allocatePWMWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:17</i><br>
	 * @deprecated use the safer methods {@link #allocatePWMWithModule(byte, java.nio.IntBuffer)} and {@link #allocatePWMWithModule(byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer allocatePWMWithModule(byte module, IntByReference status);
	/**
	 * Original signature : <code>void* allocatePWMWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:17</i>
	 */
	public static native Pointer allocatePWMWithModule(byte module, IntBuffer status);
	/**
	 * Original signature : <code>void freePWM(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:18</i><br>
	 * @deprecated use the safer methods {@link #freePWM(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #freePWM(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void freePWM(Pointer pwmGenerator, IntByReference status);
	/**
	 * Original signature : <code>void freePWM(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:18</i>
	 */
	public static native void freePWM(Pointer pwmGenerator, IntBuffer status);
	/**
	 * Original signature : <code>void freePWMWithModule(uint8_t, void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:19</i><br>
	 * @deprecated use the safer methods {@link #freePWMWithModule(byte, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #freePWMWithModule(byte, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void freePWMWithModule(byte module, Pointer pwmGenerator, IntByReference status);
	/**
	 * Original signature : <code>void freePWMWithModule(uint8_t, void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:19</i>
	 */
	public static native void freePWMWithModule(byte module, Pointer pwmGenerator, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMRate(float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:20</i><br>
	 * @deprecated use the safer methods {@link #setPWMRate(float, java.nio.IntBuffer)} and {@link #setPWMRate(float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMRate(double rate, IntByReference status);
	/**
	 * Original signature : <code>void setPWMRate(float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:20</i>
	 */
	public static native void setPWMRate(double rate, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMRateWithModule(uint8_t, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:21</i><br>
	 * @deprecated use the safer methods {@link #setPWMRateWithModule(byte, float, java.nio.IntBuffer)} and {@link #setPWMRateWithModule(byte, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMRateWithModule(byte module, double rate, IntByReference status);
	/**
	 * Original signature : <code>void setPWMRateWithModule(uint8_t, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:21</i>
	 */
	public static native void setPWMRateWithModule(byte module, double rate, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMDutyCycle(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:22</i><br>
	 * @deprecated use the safer methods {@link #setPWMDutyCycle(com.sun.jna.Pointer, float, java.nio.IntBuffer)} and {@link #setPWMDutyCycle(com.sun.jna.Pointer, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMDutyCycle(Pointer pwmGenerator, double dutyCycle, IntByReference status);
	/**
	 * Original signature : <code>void setPWMDutyCycle(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:22</i>
	 */
	public static native void setPWMDutyCycle(Pointer pwmGenerator, double dutyCycle, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMDutyCycleWithModule(uint8_t, void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:23</i><br>
	 * @deprecated use the safer methods {@link #setPWMDutyCycleWithModule(byte, com.sun.jna.Pointer, float, java.nio.IntBuffer)} and {@link #setPWMDutyCycleWithModule(byte, com.sun.jna.Pointer, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMDutyCycleWithModule(byte module, Pointer pwmGenerator, double dutyCycle, IntByReference status);
	/**
	 * Original signature : <code>void setPWMDutyCycleWithModule(uint8_t, void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:23</i>
	 */
	public static native void setPWMDutyCycleWithModule(byte module, Pointer pwmGenerator, double dutyCycle, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMOutputChannel(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:24</i><br>
	 * @deprecated use the safer methods {@link #setPWMOutputChannel(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setPWMOutputChannel(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMOutputChannel(Pointer pwmGenerator, int pin, IntByReference status);
	/**
	 * Original signature : <code>void setPWMOutputChannel(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:24</i>
	 */
	public static native void setPWMOutputChannel(Pointer pwmGenerator, int pin, IntBuffer status);
	/**
	 * Original signature : <code>void setPWMOutputChannelWithModule(uint8_t, void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:25</i><br>
	 * @deprecated use the safer methods {@link #setPWMOutputChannelWithModule(byte, com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setPWMOutputChannelWithModule(byte, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setPWMOutputChannelWithModule(byte module, Pointer pwmGenerator, int pin, IntByReference status);
	/**
	 * Original signature : <code>void setPWMOutputChannelWithModule(uint8_t, void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:25</i>
	 */
	public static native void setPWMOutputChannelWithModule(byte module, Pointer pwmGenerator, int pin, IntBuffer status);
	/**
	 * Original signature : <code>void setRelayForward(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:27</i><br>
	 * @deprecated use the safer methods {@link #setRelayForward(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setRelayForward(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setRelayForward(Pointer digital_port_pointer, byte on, IntByReference status);
	/**
	 * Original signature : <code>void setRelayForward(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:27</i>
	 */
	public static native void setRelayForward(Pointer digital_port_pointer, byte on, IntBuffer status);
	/**
	 * Original signature : <code>void setRelayReverse(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:28</i><br>
	 * @deprecated use the safer methods {@link #setRelayReverse(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setRelayReverse(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setRelayReverse(Pointer digital_port_pointer, byte on, IntByReference status);
	/**
	 * Original signature : <code>void setRelayReverse(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:28</i>
	 */
	public static native void setRelayReverse(Pointer digital_port_pointer, byte on, IntBuffer status);
	/**
	 * Original signature : <code>bool getRelayForward(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:29</i><br>
	 * @deprecated use the safer methods {@link #getRelayForward(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getRelayForward(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getRelayForward(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getRelayForward(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:29</i>
	 */
	public static native byte getRelayForward(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool getRelayReverse(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:30</i><br>
	 * @deprecated use the safer methods {@link #getRelayReverse(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getRelayReverse(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getRelayReverse(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getRelayReverse(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:30</i>
	 */
	public static native byte getRelayReverse(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool allocateDIO(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:32</i><br>
	 * @deprecated use the safer methods {@link #allocateDIO(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #allocateDIO(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte allocateDIO(Pointer digital_port_pointer, byte input, IntByReference status);
	/**
	 * Original signature : <code>bool allocateDIO(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:32</i>
	 */
	public static native byte allocateDIO(Pointer digital_port_pointer, byte input, IntBuffer status);
	/**
	 * Original signature : <code>void freeDIO(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:33</i><br>
	 * @deprecated use the safer methods {@link #freeDIO(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #freeDIO(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void freeDIO(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>void freeDIO(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:33</i>
	 */
	public static native void freeDIO(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setDIO(void*, short, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:34</i><br>
	 * @deprecated use the safer methods {@link #setDIO(com.sun.jna.Pointer, short, java.nio.IntBuffer)} and {@link #setDIO(com.sun.jna.Pointer, short, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setDIO(Pointer digital_port_pointer, short value, IntByReference status);
	/**
	 * Original signature : <code>void setDIO(void*, short, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:34</i>
	 */
	public static native void setDIO(Pointer digital_port_pointer, short value, IntBuffer status);
	/**
	 * Original signature : <code>bool getDIO(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:35</i><br>
	 * @deprecated use the safer methods {@link #getDIO(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getDIO(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getDIO(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getDIO(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:35</i>
	 */
	public static native byte getDIO(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool getDIODirection(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:36</i><br>
	 * @deprecated use the safer methods {@link #getDIODirection(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getDIODirection(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getDIODirection(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getDIODirection(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:36</i>
	 */
	public static native byte getDIODirection(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void pulse(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:37</i><br>
	 * @deprecated use the safer methods {@link #pulse(com.sun.jna.Pointer, float, java.nio.IntBuffer)} and {@link #pulse(com.sun.jna.Pointer, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void pulse(Pointer digital_port_pointer, double pulseLength, IntByReference status);
	/**
	 * Original signature : <code>void pulse(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:37</i>
	 */
	public static native void pulse(Pointer digital_port_pointer, double pulseLength, IntBuffer status);
	/**
	 * Original signature : <code>bool isPulsing(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:38</i><br>
	 * @deprecated use the safer methods {@link #isPulsing(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #isPulsing(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isPulsing(Pointer digital_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool isPulsing(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:38</i>
	 */
	public static native byte isPulsing(Pointer digital_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool isAnyPulsing(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:39</i><br>
	 * @deprecated use the safer methods {@link #isAnyPulsing(java.nio.IntBuffer)} and {@link #isAnyPulsing(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isAnyPulsing(IntByReference status);
	/**
	 * Original signature : <code>bool isAnyPulsing(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:39</i>
	 */
	public static native byte isAnyPulsing(IntBuffer status);
	/**
	 * Original signature : <code>bool isAnyPulsingWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:40</i><br>
	 * @deprecated use the safer methods {@link #isAnyPulsingWithModule(byte, java.nio.IntBuffer)} and {@link #isAnyPulsingWithModule(byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isAnyPulsingWithModule(byte module, IntByReference status);
	/**
	 * Original signature : <code>bool isAnyPulsingWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:40</i>
	 */
	public static native byte isAnyPulsingWithModule(byte module, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeCounter(Mode, uint32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:44</i><br>
	 * @deprecated use the safer methods {@link #initializeCounter(int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #initializeCounter(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeCounter(int mode, IntByReference index, IntByReference status);
	/**
	 * Original signature : <code>void* initializeCounter(Mode, uint32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:44</i>
	 */
	public static native Pointer initializeCounter(int mode, IntBuffer index, IntBuffer status);
	/**
	 * Original signature : <code>void freeCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:45</i><br>
	 * @deprecated use the safer methods {@link #freeCounter(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #freeCounter(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void freeCounter(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void freeCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:45</i>
	 */
	public static native void freeCounter(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterAverageSize(void*, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:46</i><br>
	 * @deprecated use the safer methods {@link #setCounterAverageSize(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setCounterAverageSize(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterAverageSize(Pointer counter_pointer, int size, IntByReference status);
	/**
	 * Original signature : <code>void setCounterAverageSize(void*, int32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:46</i>
	 */
	public static native void setCounterAverageSize(Pointer counter_pointer, int size, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterUpSourceWithModule(void*, uint8_t, uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:47</i><br>
	 * @deprecated use the safer methods {@link #setCounterUpSourceWithModule(com.sun.jna.Pointer, byte, int, byte, java.nio.IntBuffer)} and {@link #setCounterUpSourceWithModule(com.sun.jna.Pointer, byte, int, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterUpSourceWithModule(Pointer counter_pointer, byte module, int pin, byte analogTrigger, IntByReference status);
	/**
	 * Original signature : <code>void setCounterUpSourceWithModule(void*, uint8_t, uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:47</i>
	 */
	public static native void setCounterUpSourceWithModule(Pointer counter_pointer, byte module, int pin, byte analogTrigger, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterUpSourceEdge(void*, bool, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:49</i><br>
	 * @deprecated use the safer methods {@link #setCounterUpSourceEdge(com.sun.jna.Pointer, byte, byte, java.nio.IntBuffer)} and {@link #setCounterUpSourceEdge(com.sun.jna.Pointer, byte, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterUpSourceEdge(Pointer counter_pointer, byte risingEdge, byte fallingEdge, IntByReference status);
	/**
	 * Original signature : <code>void setCounterUpSourceEdge(void*, bool, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:49</i>
	 */
	public static native void setCounterUpSourceEdge(Pointer counter_pointer, byte risingEdge, byte fallingEdge, IntBuffer status);
	/**
	 * Original signature : <code>void clearCounterUpSource(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:50</i><br>
	 * @deprecated use the safer methods {@link #clearCounterUpSource(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clearCounterUpSource(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void clearCounterUpSource(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void clearCounterUpSource(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:50</i>
	 */
	public static native void clearCounterUpSource(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterDownSourceWithModule(void*, uint8_t, uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:51</i><br>
	 * @deprecated use the safer methods {@link #setCounterDownSourceWithModule(com.sun.jna.Pointer, byte, int, byte, java.nio.IntBuffer)} and {@link #setCounterDownSourceWithModule(com.sun.jna.Pointer, byte, int, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterDownSourceWithModule(Pointer counter_pointer, byte module, int pin, byte analogTrigger, IntByReference status);
	/**
	 * Original signature : <code>void setCounterDownSourceWithModule(void*, uint8_t, uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:51</i>
	 */
	public static native void setCounterDownSourceWithModule(Pointer counter_pointer, byte module, int pin, byte analogTrigger, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterDownSourceEdge(void*, bool, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:53</i><br>
	 * @deprecated use the safer methods {@link #setCounterDownSourceEdge(com.sun.jna.Pointer, byte, byte, java.nio.IntBuffer)} and {@link #setCounterDownSourceEdge(com.sun.jna.Pointer, byte, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterDownSourceEdge(Pointer counter_pointer, byte risingEdge, byte fallingEdge, IntByReference status);
	/**
	 * Original signature : <code>void setCounterDownSourceEdge(void*, bool, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:53</i>
	 */
	public static native void setCounterDownSourceEdge(Pointer counter_pointer, byte risingEdge, byte fallingEdge, IntBuffer status);
	/**
	 * Original signature : <code>void clearCounterDownSource(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:54</i><br>
	 * @deprecated use the safer methods {@link #clearCounterDownSource(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clearCounterDownSource(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void clearCounterDownSource(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void clearCounterDownSource(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:54</i>
	 */
	public static native void clearCounterDownSource(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterUpDownMode(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:55</i><br>
	 * @deprecated use the safer methods {@link #setCounterUpDownMode(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setCounterUpDownMode(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterUpDownMode(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setCounterUpDownMode(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:55</i>
	 */
	public static native void setCounterUpDownMode(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterExternalDirectionMode(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:56</i><br>
	 * @deprecated use the safer methods {@link #setCounterExternalDirectionMode(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setCounterExternalDirectionMode(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterExternalDirectionMode(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setCounterExternalDirectionMode(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:56</i>
	 */
	public static native void setCounterExternalDirectionMode(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterSemiPeriodMode(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:57</i><br>
	 * @deprecated use the safer methods {@link #setCounterSemiPeriodMode(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setCounterSemiPeriodMode(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterSemiPeriodMode(Pointer counter_pointer, byte highSemiPeriod, IntByReference status);
	/**
	 * Original signature : <code>void setCounterSemiPeriodMode(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:57</i>
	 */
	public static native void setCounterSemiPeriodMode(Pointer counter_pointer, byte highSemiPeriod, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterPulseLengthMode(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:58</i><br>
	 * @deprecated use the safer methods {@link #setCounterPulseLengthMode(com.sun.jna.Pointer, float, java.nio.IntBuffer)} and {@link #setCounterPulseLengthMode(com.sun.jna.Pointer, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterPulseLengthMode(Pointer counter_pointer, double threshold, IntByReference status);
	/**
	 * Original signature : <code>void setCounterPulseLengthMode(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:58</i>
	 */
	public static native void setCounterPulseLengthMode(Pointer counter_pointer, double threshold, IntBuffer status);
	/**
	 * Original signature : <code>int32_t getCounterSamplesToAverage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:59</i><br>
	 * @deprecated use the safer methods {@link #getCounterSamplesToAverage(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getCounterSamplesToAverage(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getCounterSamplesToAverage(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>int32_t getCounterSamplesToAverage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:59</i>
	 */
	public static native int getCounterSamplesToAverage(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterSamplesToAverage(void*, int, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:60</i><br>
	 * @deprecated use the safer methods {@link #setCounterSamplesToAverage(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setCounterSamplesToAverage(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterSamplesToAverage(Pointer counter_pointer, int samplesToAverage, IntByReference status);
	/**
	 * Original signature : <code>void setCounterSamplesToAverage(void*, int, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:60</i>
	 */
	public static native void setCounterSamplesToAverage(Pointer counter_pointer, int samplesToAverage, IntBuffer status);
	/**
	 * Original signature : <code>void startCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:61</i><br>
	 * @deprecated use the safer methods {@link #startCounter(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #startCounter(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void startCounter(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void startCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:61</i>
	 */
	public static native void startCounter(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void stopCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:62</i><br>
	 * @deprecated use the safer methods {@link #stopCounter(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #stopCounter(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void stopCounter(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void stopCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:62</i>
	 */
	public static native void stopCounter(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void resetCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:63</i><br>
	 * @deprecated use the safer methods {@link #resetCounter(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #resetCounter(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void resetCounter(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>void resetCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:63</i>
	 */
	public static native void resetCounter(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>int32_t getCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:64</i><br>
	 * @deprecated use the safer methods {@link #getCounter(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getCounter(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getCounter(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>int32_t getCounter(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:64</i>
	 */
	public static native int getCounter(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>double getCounterPeriod(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:65</i><br>
	 * @deprecated use the safer methods {@link #getCounterPeriod(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getCounterPeriod(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native double getCounterPeriod(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>double getCounterPeriod(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:65</i>
	 */
	public static native double getCounterPeriod(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterMaxPeriod(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:66</i><br>
	 * @deprecated use the safer methods {@link #setCounterMaxPeriod(com.sun.jna.Pointer, double, java.nio.IntBuffer)} and {@link #setCounterMaxPeriod(com.sun.jna.Pointer, double, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterMaxPeriod(Pointer counter_pointer, double maxPeriod, IntByReference status);
	/**
	 * Original signature : <code>void setCounterMaxPeriod(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:66</i>
	 */
	public static native void setCounterMaxPeriod(Pointer counter_pointer, double maxPeriod, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterUpdateWhenEmpty(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:67</i><br>
	 * @deprecated use the safer methods {@link #setCounterUpdateWhenEmpty(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setCounterUpdateWhenEmpty(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterUpdateWhenEmpty(Pointer counter_pointer, byte enabled, IntByReference status);
	/**
	 * Original signature : <code>void setCounterUpdateWhenEmpty(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:67</i>
	 */
	public static native void setCounterUpdateWhenEmpty(Pointer counter_pointer, byte enabled, IntBuffer status);
	/**
	 * Original signature : <code>bool getCounterStopped(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:68</i><br>
	 * @deprecated use the safer methods {@link #getCounterStopped(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getCounterStopped(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getCounterStopped(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getCounterStopped(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:68</i>
	 */
	public static native byte getCounterStopped(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool getCounterDirection(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:69</i><br>
	 * @deprecated use the safer methods {@link #getCounterDirection(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getCounterDirection(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getCounterDirection(Pointer counter_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getCounterDirection(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:69</i>
	 */
	public static native byte getCounterDirection(Pointer counter_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setCounterReverseDirection(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:70</i><br>
	 * @deprecated use the safer methods {@link #setCounterReverseDirection(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setCounterReverseDirection(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setCounterReverseDirection(Pointer counter_pointer, byte reverseDirection, IntByReference status);
	/**
	 * Original signature : <code>void setCounterReverseDirection(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:70</i>
	 */
	public static native void setCounterReverseDirection(Pointer counter_pointer, byte reverseDirection, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeEncoder(uint8_t, uint32_t, bool, uint8_t, uint32_t, bool, bool, int32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:72</i><br>
	 * @deprecated use the safer methods {@link #initializeEncoder(byte, int, byte, byte, int, byte, byte, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #initializeEncoder(byte, int, byte, byte, int, byte, byte, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeEncoder(byte port_a_module, int port_a_pin, byte port_a_analog_trigger, byte port_b_module, int port_b_pin, byte port_b_analog_trigger, byte reverseDirection, IntByReference index, IntByReference status);
	/**
	 * Original signature : <code>void* initializeEncoder(uint8_t, uint32_t, bool, uint8_t, uint32_t, bool, bool, int32_t*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:72</i>
	 */
	public static native Pointer initializeEncoder(byte port_a_module, int port_a_pin, byte port_a_analog_trigger, byte port_b_module, int port_b_pin, byte port_b_analog_trigger, byte reverseDirection, IntBuffer index, IntBuffer status);
	/**
	 * Original signature : <code>void freeEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:75</i><br>
	 * @deprecated use the safer methods {@link #freeEncoder(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #freeEncoder(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void freeEncoder(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>void freeEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:75</i>
	 */
	public static native void freeEncoder(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void startEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:76</i><br>
	 * @deprecated use the safer methods {@link #startEncoder(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #startEncoder(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void startEncoder(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>void startEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:76</i>
	 */
	public static native void startEncoder(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void stopEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:77</i><br>
	 * @deprecated use the safer methods {@link #stopEncoder(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #stopEncoder(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void stopEncoder(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>void stopEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:77</i>
	 */
	public static native void stopEncoder(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void resetEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:78</i><br>
	 * @deprecated use the safer methods {@link #resetEncoder(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #resetEncoder(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void resetEncoder(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>void resetEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:78</i>
	 */
	public static native void resetEncoder(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Raw value<br>
	 * Original signature : <code>int32_t getEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:79</i><br>
	 * @deprecated use the safer methods {@link #getEncoder(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getEncoder(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getEncoder(Pointer encoder_pointer, IntByReference status);
	/**
	 * Raw value<br>
	 * Original signature : <code>int32_t getEncoder(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:79</i>
	 */
	public static native int getEncoder(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>double getEncoderPeriod(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:80</i><br>
	 * @deprecated use the safer methods {@link #getEncoderPeriod(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getEncoderPeriod(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native double getEncoderPeriod(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>double getEncoderPeriod(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:80</i>
	 */
	public static native double getEncoderPeriod(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setEncoderMaxPeriod(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:81</i><br>
	 * @deprecated use the safer methods {@link #setEncoderMaxPeriod(com.sun.jna.Pointer, double, java.nio.IntBuffer)} and {@link #setEncoderMaxPeriod(com.sun.jna.Pointer, double, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setEncoderMaxPeriod(Pointer encoder_pointer, double maxPeriod, IntByReference status);
	/**
	 * Original signature : <code>void setEncoderMaxPeriod(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:81</i>
	 */
	public static native void setEncoderMaxPeriod(Pointer encoder_pointer, double maxPeriod, IntBuffer status);
	/**
	 * Original signature : <code>bool getEncoderStopped(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:82</i><br>
	 * @deprecated use the safer methods {@link #getEncoderStopped(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getEncoderStopped(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getEncoderStopped(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getEncoderStopped(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:82</i>
	 */
	public static native byte getEncoderStopped(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool getEncoderDirection(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:83</i><br>
	 * @deprecated use the safer methods {@link #getEncoderDirection(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getEncoderDirection(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getEncoderDirection(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getEncoderDirection(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:83</i>
	 */
	public static native byte getEncoderDirection(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setEncoderReverseDirection(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:84</i><br>
	 * @deprecated use the safer methods {@link #setEncoderReverseDirection(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setEncoderReverseDirection(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setEncoderReverseDirection(Pointer encoder_pointer, byte reverseDirection, IntByReference status);
	/**
	 * Original signature : <code>void setEncoderReverseDirection(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:84</i>
	 */
	public static native void setEncoderReverseDirection(Pointer encoder_pointer, byte reverseDirection, IntBuffer status);
	/**
	 * Original signature : <code>void setEncoderSamplesToAverage(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:85</i><br>
	 * @deprecated use the safer methods {@link #setEncoderSamplesToAverage(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setEncoderSamplesToAverage(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setEncoderSamplesToAverage(Pointer encoder_pointer, int samplesToAverage, IntByReference status);
	/**
	 * Original signature : <code>void setEncoderSamplesToAverage(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:85</i>
	 */
	public static native void setEncoderSamplesToAverage(Pointer encoder_pointer, int samplesToAverage, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getEncoderSamplesToAverage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:86</i><br>
	 * @deprecated use the safer methods {@link #getEncoderSamplesToAverage(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getEncoderSamplesToAverage(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getEncoderSamplesToAverage(Pointer encoder_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint32_t getEncoderSamplesToAverage(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:86</i>
	 */
	public static native int getEncoderSamplesToAverage(Pointer encoder_pointer, IntBuffer status);
	/**
	 * Original signature : <code>uint16_t getLoopTiming(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:88</i><br>
	 * @deprecated use the safer methods {@link #getLoopTiming(java.nio.IntBuffer)} and {@link #getLoopTiming(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native short getLoopTiming(IntByReference status);
	/**
	 * Original signature : <code>uint16_t getLoopTiming(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:88</i>
	 */
	public static native short getLoopTiming(IntBuffer status);
	/**
	 * Original signature : <code>uint16_t getLoopTimingWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:89</i><br>
	 * @deprecated use the safer methods {@link #getLoopTimingWithModule(byte, java.nio.IntBuffer)} and {@link #getLoopTimingWithModule(byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native short getLoopTimingWithModule(byte module, IntByReference status);
	/**
	 * Original signature : <code>uint16_t getLoopTimingWithModule(uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:89</i>
	 */
	public static native short getLoopTimingWithModule(byte module, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeSPI(uint8_t, uint32_t, uint8_t, uint32_t, uint8_t, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:93</i><br>
	 * @deprecated use the safer methods {@link #initializeSPI(byte, int, byte, int, byte, int, java.nio.IntBuffer)} and {@link #initializeSPI(byte, int, byte, int, byte, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeSPI(byte sclk_routing_module, int sclk_routing_pin, byte mosi_routing_module, int mosi_routing_pin, byte miso_routing_module, int miso_routing_pin, IntByReference status);
	/**
	 * Original signature : <code>void* initializeSPI(uint8_t, uint32_t, uint8_t, uint32_t, uint8_t, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:93</i>
	 */
	public static native Pointer initializeSPI(byte sclk_routing_module, int sclk_routing_pin, byte mosi_routing_module, int mosi_routing_pin, byte miso_routing_module, int miso_routing_pin, IntBuffer status);
	/**
	 * Original signature : <code>void cleanSPI(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:96</i><br>
	 * @deprecated use the safer methods {@link #cleanSPI(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #cleanSPI(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void cleanSPI(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void cleanSPI(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:96</i>
	 */
	public static native void cleanSPI(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPIBitsPerWord(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:97</i><br>
	 * @deprecated use the safer methods {@link #setSPIBitsPerWord(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setSPIBitsPerWord(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPIBitsPerWord(Pointer spi_pointer, int bits, IntByReference status);
	/**
	 * Original signature : <code>void setSPIBitsPerWord(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:97</i>
	 */
	public static native void setSPIBitsPerWord(Pointer spi_pointer, int bits, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getSPIBitsPerWord(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:98</i><br>
	 * @deprecated use the safer methods {@link #getSPIBitsPerWord(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getSPIBitsPerWord(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getSPIBitsPerWord(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint32_t getSPIBitsPerWord(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:98</i>
	 */
	public static native int getSPIBitsPerWord(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPIClockRate(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:99</i><br>
	 * @deprecated use the safer methods {@link #setSPIClockRate(com.sun.jna.Pointer, double, java.nio.IntBuffer)} and {@link #setSPIClockRate(com.sun.jna.Pointer, double, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPIClockRate(Pointer spi_pointer, double hz, IntByReference status);
	/**
	 * Original signature : <code>void setSPIClockRate(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:99</i>
	 */
	public static native void setSPIClockRate(Pointer spi_pointer, double hz, IntBuffer status);
	/**
	 * Original signature : <code>void setSPIMSBFirst(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:100</i><br>
	 * @deprecated use the safer methods {@link #setSPIMSBFirst(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setSPIMSBFirst(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPIMSBFirst(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setSPIMSBFirst(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:100</i>
	 */
	public static native void setSPIMSBFirst(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPILSBFirst(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:101</i><br>
	 * @deprecated use the safer methods {@link #setSPILSBFirst(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setSPILSBFirst(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPILSBFirst(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setSPILSBFirst(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:101</i>
	 */
	public static native void setSPILSBFirst(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPISampleDataOnFalling(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:102</i><br>
	 * @deprecated use the safer methods {@link #setSPISampleDataOnFalling(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setSPISampleDataOnFalling(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPISampleDataOnFalling(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setSPISampleDataOnFalling(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:102</i>
	 */
	public static native void setSPISampleDataOnFalling(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPISampleDataOnRising(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:103</i><br>
	 * @deprecated use the safer methods {@link #setSPISampleDataOnRising(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setSPISampleDataOnRising(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPISampleDataOnRising(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setSPISampleDataOnRising(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:103</i>
	 */
	public static native void setSPISampleDataOnRising(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPISlaveSelect(void*, uint8_t, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:104</i><br>
	 * @deprecated use the safer methods {@link #setSPISlaveSelect(com.sun.jna.Pointer, byte, int, java.nio.IntBuffer)} and {@link #setSPISlaveSelect(com.sun.jna.Pointer, byte, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPISlaveSelect(Pointer spi_pointer, byte ss_routing_module, int ss_routing_pin, IntByReference status);
	/**
	 * Original signature : <code>void setSPISlaveSelect(void*, uint8_t, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:104</i>
	 */
	public static native void setSPISlaveSelect(Pointer spi_pointer, byte ss_routing_module, int ss_routing_pin, IntBuffer status);
	/**
	 * Original signature : <code>void setSPILatchMode(void*, tFrameMode, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:106</i><br>
	 * @deprecated use the safer methods {@link #setSPILatchMode(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #setSPILatchMode(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPILatchMode(Pointer spi_pointer, int mode, IntByReference status);
	/**
	 * Original signature : <code>void setSPILatchMode(void*, tFrameMode, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:106</i>
	 */
	public static native void setSPILatchMode(Pointer spi_pointer, int mode, IntBuffer status);
	/**
	 * Original signature : <code>tFrameMode getSPILatchMode(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:107</i><br>
	 * @deprecated use the safer methods {@link #getSPILatchMode(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getSPILatchMode(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getSPILatchMode(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>tFrameMode getSPILatchMode(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:107</i>
	 */
	public static native int getSPILatchMode(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPIFramePolarity(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:108</i><br>
	 * @deprecated use the safer methods {@link #setSPIFramePolarity(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setSPIFramePolarity(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPIFramePolarity(Pointer spi_pointer, byte activeLow, IntByReference status);
	/**
	 * Original signature : <code>void setSPIFramePolarity(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:108</i>
	 */
	public static native void setSPIFramePolarity(Pointer spi_pointer, byte activeLow, IntBuffer status);
	/**
	 * Original signature : <code>bool getSPIFramePolarity(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:109</i><br>
	 * @deprecated use the safer methods {@link #getSPIFramePolarity(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getSPIFramePolarity(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getSPIFramePolarity(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getSPIFramePolarity(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:109</i>
	 */
	public static native byte getSPIFramePolarity(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPIClockActiveLow(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:110</i><br>
	 * @deprecated use the safer methods {@link #setSPIClockActiveLow(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setSPIClockActiveLow(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPIClockActiveLow(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setSPIClockActiveLow(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:110</i>
	 */
	public static native void setSPIClockActiveLow(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSPIClockActiveHigh(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:111</i><br>
	 * @deprecated use the safer methods {@link #setSPIClockActiveHigh(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #setSPIClockActiveHigh(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSPIClockActiveHigh(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void setSPIClockActiveHigh(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:111</i>
	 */
	public static native void setSPIClockActiveHigh(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void applySPIConfig(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:112</i><br>
	 * @deprecated use the safer methods {@link #applySPIConfig(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #applySPIConfig(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void applySPIConfig(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void applySPIConfig(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:112</i>
	 */
	public static native void applySPIConfig(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>uint16_t getSPIOutputFIFOAvailable(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:113</i><br>
	 * @deprecated use the safer methods {@link #getSPIOutputFIFOAvailable(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getSPIOutputFIFOAvailable(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native short getSPIOutputFIFOAvailable(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint16_t getSPIOutputFIFOAvailable(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:113</i>
	 */
	public static native short getSPIOutputFIFOAvailable(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>uint16_t getSPINumReceived(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:114</i><br>
	 * @deprecated use the safer methods {@link #getSPINumReceived(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getSPINumReceived(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native short getSPINumReceived(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>uint16_t getSPINumReceived(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:114</i>
	 */
	public static native short getSPINumReceived(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool isSPIDone(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:115</i><br>
	 * @deprecated use the safer methods {@link #isSPIDone(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #isSPIDone(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isSPIDone(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool isSPIDone(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:115</i>
	 */
	public static native byte isSPIDone(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool hadSPIReceiveOverflow(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:116</i><br>
	 * @deprecated use the safer methods {@link #hadSPIReceiveOverflow(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #hadSPIReceiveOverflow(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte hadSPIReceiveOverflow(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool hadSPIReceiveOverflow(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:116</i>
	 */
	public static native byte hadSPIReceiveOverflow(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void writeSPI(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:117</i><br>
	 * @deprecated use the safer methods {@link #writeSPI(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #writeSPI(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void writeSPI(Pointer spi_pointer, int data, IntByReference status);
	/**
	 * Original signature : <code>void writeSPI(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:117</i>
	 */
	public static native void writeSPI(Pointer spi_pointer, int data, IntBuffer status);
	/**
	 * Original signature : <code>uint32_t readSPI(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:118</i><br>
	 * @deprecated use the safer methods {@link #readSPI(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #readSPI(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int readSPI(Pointer spi_pointer, byte initiate, IntByReference status);
	/**
	 * Original signature : <code>uint32_t readSPI(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:118</i>
	 */
	public static native int readSPI(Pointer spi_pointer, byte initiate, IntBuffer status);
	/**
	 * Original signature : <code>void resetSPI(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:119</i><br>
	 * @deprecated use the safer methods {@link #resetSPI(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #resetSPI(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void resetSPI(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void resetSPI(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:119</i>
	 */
	public static native void resetSPI(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void clearSPIReceivedData(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:120</i><br>
	 * @deprecated use the safer methods {@link #clearSPIReceivedData(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clearSPIReceivedData(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void clearSPIReceivedData(Pointer spi_pointer, IntByReference status);
	/**
	 * Original signature : <code>void clearSPIReceivedData(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:120</i>
	 */
	public static native void clearSPIReceivedData(Pointer spi_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool doI2CTransaction(uint8_t, bool, uint8_t*, uint8_t, uint8_t*, uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:122</i><br>
	 * @deprecated use the safer methods {@link #doI2CTransaction(byte, byte, java.nio.ByteBuffer, byte, java.nio.ByteBuffer, byte, java.nio.IntBuffer)} and {@link #doI2CTransaction(byte, byte, com.sun.jna.Pointer, byte, com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte doI2CTransaction(byte address, byte compatibilityMode, Pointer dataToSend, byte sendSize, Pointer dataReceived, byte receiveSize, IntByReference status);
	/**
	 * Original signature : <code>bool doI2CTransaction(uint8_t, bool, uint8_t*, uint8_t, uint8_t*, uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:122</i>
	 */
	public static native byte doI2CTransaction(byte address, byte compatibilityMode, ByteBuffer dataToSend, byte sendSize, ByteBuffer dataReceived, byte receiveSize, IntBuffer status);
	/**
	 * Original signature : <code>bool doI2CTransactionWithModule(uint8_t, uint8_t, bool, uint8_t*, uint8_t, uint8_t*, uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:125</i><br>
	 * @deprecated use the safer methods {@link #doI2CTransactionWithModule(byte, byte, byte, java.nio.ByteBuffer, byte, java.nio.ByteBuffer, byte, java.nio.IntBuffer)} and {@link #doI2CTransactionWithModule(byte, byte, byte, com.sun.jna.Pointer, byte, com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte doI2CTransactionWithModule(byte module, byte address, byte compatibilityMode, Pointer dataToSend, byte sendSize, Pointer dataReceived, byte receiveSize, IntByReference status);
	/**
	 * Original signature : <code>bool doI2CTransactionWithModule(uint8_t, uint8_t, bool, uint8_t*, uint8_t, uint8_t*, uint8_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Digital.h:125</i>
	 */
	public static native byte doI2CTransactionWithModule(byte module, byte address, byte compatibilityMode, ByteBuffer dataToSend, byte sendSize, ByteBuffer dataReceived, byte receiveSize, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeSolenoidPort(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:6</i><br>
	 * @deprecated use the safer methods {@link #initializeSolenoidPort(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #initializeSolenoidPort(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeSolenoidPort(Pointer port_pointer, IntByReference status);
	/**
	 * Original signature : <code>void* initializeSolenoidPort(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:6</i>
	 */
	public static native Pointer initializeSolenoidPort(Pointer port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool checkSolenoidModule(uint8_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:7</i>
	 */
	public static native byte checkSolenoidModule(byte module);
	/**
	 * Original signature : <code>bool getSolenoid(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:9</i><br>
	 * @deprecated use the safer methods {@link #getSolenoid(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getSolenoid(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getSolenoid(Pointer solenoid_port_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getSolenoid(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:9</i>
	 */
	public static native byte getSolenoid(Pointer solenoid_port_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setSolenoid(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:10</i><br>
	 * @deprecated use the safer methods {@link #setSolenoid(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setSolenoid(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setSolenoid(Pointer solenoid_port_pointer, byte value, IntByReference status);
	/**
	 * Original signature : <code>void setSolenoid(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Solenoid.h:10</i>
	 */
	public static native void setSolenoid(Pointer solenoid_port_pointer, byte value, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeWatchdog(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:9</i><br>
	 * @deprecated use the safer methods {@link #initializeWatchdog(java.nio.IntBuffer)} and {@link #initializeWatchdog(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeWatchdog(IntByReference status);
	/**
	 * Original signature : <code>void* initializeWatchdog(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:9</i>
	 */
	public static native Pointer initializeWatchdog(IntBuffer status);
	/**
	 * Original signature : <code>void cleanWatchdog(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:10</i><br>
	 * @deprecated use the safer methods {@link #cleanWatchdog(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #cleanWatchdog(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void cleanWatchdog(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>void cleanWatchdog(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:10</i>
	 */
	public static native void cleanWatchdog(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool feedWatchdog(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:12</i><br>
	 * @deprecated use the safer methods {@link #feedWatchdog(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #feedWatchdog(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte feedWatchdog(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool feedWatchdog(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:12</i>
	 */
	public static native byte feedWatchdog(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void killWatchdog(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:13</i><br>
	 * @deprecated use the safer methods {@link #killWatchdog(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #killWatchdog(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void killWatchdog(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>void killWatchdog(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:13</i>
	 */
	public static native void killWatchdog(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>double getWatchdogLastFed(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:14</i><br>
	 * @deprecated use the safer methods {@link #getWatchdogLastFed(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getWatchdogLastFed(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native double getWatchdogLastFed(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>double getWatchdogLastFed(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:14</i>
	 */
	public static native double getWatchdogLastFed(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>double getWatchdogExpiration(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:15</i><br>
	 * @deprecated use the safer methods {@link #getWatchdogExpiration(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getWatchdogExpiration(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native double getWatchdogExpiration(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>double getWatchdogExpiration(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:15</i>
	 */
	public static native double getWatchdogExpiration(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setWatchdogExpiration(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:16</i><br>
	 * @deprecated use the safer methods {@link #setWatchdogExpiration(com.sun.jna.Pointer, double, java.nio.IntBuffer)} and {@link #setWatchdogExpiration(com.sun.jna.Pointer, double, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setWatchdogExpiration(Pointer watchdog_pointer, double expiration, IntByReference status);
	/**
	 * Original signature : <code>void setWatchdogExpiration(void*, double, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:16</i>
	 */
	public static native void setWatchdogExpiration(Pointer watchdog_pointer, double expiration, IntBuffer status);
	/**
	 * Original signature : <code>bool getWatchdogEnabled(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:17</i><br>
	 * @deprecated use the safer methods {@link #getWatchdogEnabled(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getWatchdogEnabled(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte getWatchdogEnabled(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool getWatchdogEnabled(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:17</i>
	 */
	public static native byte getWatchdogEnabled(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void setWatchdogEnabled(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:18</i><br>
	 * @deprecated use the safer methods {@link #setWatchdogEnabled(com.sun.jna.Pointer, byte, java.nio.IntBuffer)} and {@link #setWatchdogEnabled(com.sun.jna.Pointer, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setWatchdogEnabled(Pointer watchdog_pointer, byte enabled, IntByReference status);
	/**
	 * Original signature : <code>void setWatchdogEnabled(void*, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:18</i>
	 */
	public static native void setWatchdogEnabled(Pointer watchdog_pointer, byte enabled, IntBuffer status);
	/**
	 * Original signature : <code>bool isWatchdogAlive(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:19</i><br>
	 * @deprecated use the safer methods {@link #isWatchdogAlive(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #isWatchdogAlive(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isWatchdogAlive(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool isWatchdogAlive(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:19</i>
	 */
	public static native byte isWatchdogAlive(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>bool isWatchdogSystemActive(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:20</i><br>
	 * @deprecated use the safer methods {@link #isWatchdogSystemActive(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #isWatchdogSystemActive(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte isWatchdogSystemActive(Pointer watchdog_pointer, IntByReference status);
	/**
	 * Original signature : <code>bool isWatchdogSystemActive(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Watchdog.h:20</i>
	 */
	public static native byte isWatchdogSystemActive(Pointer watchdog_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeNotifier(initializeNotifier_ProcessQueue_callback*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Notifier.h:7</i><br>
	 * @deprecated use the safer methods {@link #initializeNotifier(edu.wpi.first.wpilibj.hal.HALLibrary.initializeNotifier_ProcessQueue_callback, java.nio.IntBuffer)} and {@link #initializeNotifier(edu.wpi.first.wpilibj.hal.HALLibrary.initializeNotifier_ProcessQueue_callback, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeNotifier(HALLibrary.initializeNotifier_ProcessQueue_callback ProcessQueue, IntByReference status);
	/**
	 * Original signature : <code>void* initializeNotifier(initializeNotifier_ProcessQueue_callback*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Notifier.h:7</i>
	 */
	public static native Pointer initializeNotifier(HALLibrary.initializeNotifier_ProcessQueue_callback ProcessQueue, IntBuffer status);
	/**
	 * Original signature : <code>void cleanNotifier(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Notifier.h:8</i><br>
	 * @deprecated use the safer methods {@link #cleanNotifier(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #cleanNotifier(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void cleanNotifier(Pointer notifier_pointer, IntByReference status);
	/**
	 * Original signature : <code>void cleanNotifier(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Notifier.h:8</i>
	 */
	public static native void cleanNotifier(Pointer notifier_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void updateNotifierAlarm(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Notifier.h:10</i><br>
	 * @deprecated use the safer methods {@link #updateNotifierAlarm(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #updateNotifierAlarm(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void updateNotifierAlarm(Pointer notifier_pointer, int triggerTime, IntByReference status);
	/**
	 * Original signature : <code>void updateNotifierAlarm(void*, uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Notifier.h:10</i>
	 */
	public static native void updateNotifierAlarm(Pointer notifier_pointer, int triggerTime, IntBuffer status);
	/**
	 * Original signature : <code>void* initializeInterrupts(uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:9</i><br>
	 * @deprecated use the safer methods {@link #initializeInterrupts(int, byte, java.nio.IntBuffer)} and {@link #initializeInterrupts(int, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native Pointer initializeInterrupts(int interruptIndex, byte watcher, IntByReference status);
	/**
	 * Original signature : <code>void* initializeInterrupts(uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:9</i>
	 */
	public static native Pointer initializeInterrupts(int interruptIndex, byte watcher, IntBuffer status);
	/**
	 * Original signature : <code>void cleanInterrupts(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:10</i><br>
	 * @deprecated use the safer methods {@link #cleanInterrupts(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #cleanInterrupts(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void cleanInterrupts(Pointer interrupt_pointer, IntByReference status);
	/**
	 * Original signature : <code>void cleanInterrupts(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:10</i>
	 */
	public static native void cleanInterrupts(Pointer interrupt_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void waitForInterrupt(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:12</i><br>
	 * @deprecated use the safer methods {@link #waitForInterrupt(com.sun.jna.Pointer, float, java.nio.IntBuffer)} and {@link #waitForInterrupt(com.sun.jna.Pointer, float, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void waitForInterrupt(Pointer interrupt_pointer, double timeout, IntByReference status);
	/**
	 * Original signature : <code>void waitForInterrupt(void*, float, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:12</i>
	 */
	public static native void waitForInterrupt(Pointer interrupt_pointer, double timeout, IntBuffer status);
	/**
	 * Original signature : <code>void enableInterrupts(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:13</i><br>
	 * @deprecated use the safer methods {@link #enableInterrupts(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #enableInterrupts(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void enableInterrupts(Pointer interrupt_pointer, IntByReference status);
	/**
	 * Original signature : <code>void enableInterrupts(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:13</i>
	 */
	public static native void enableInterrupts(Pointer interrupt_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void disableInterrupts(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:14</i><br>
	 * @deprecated use the safer methods {@link #disableInterrupts(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #disableInterrupts(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void disableInterrupts(Pointer interrupt_pointer, IntByReference status);
	/**
	 * Original signature : <code>void disableInterrupts(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:14</i>
	 */
	public static native void disableInterrupts(Pointer interrupt_pointer, IntBuffer status);
	/**
	 * Original signature : <code>double readInterruptTimestamp(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:15</i><br>
	 * @deprecated use the safer methods {@link #readInterruptTimestamp(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #readInterruptTimestamp(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native double readInterruptTimestamp(Pointer interrupt_pointer, IntByReference status);
	/**
	 * Original signature : <code>double readInterruptTimestamp(void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:15</i>
	 */
	public static native double readInterruptTimestamp(Pointer interrupt_pointer, IntBuffer status);
	/**
	 * Original signature : <code>void requestInterrupts(void*, uint8_t, uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:16</i><br>
	 * @deprecated use the safer methods {@link #requestInterrupts(com.sun.jna.Pointer, byte, int, byte, java.nio.IntBuffer)} and {@link #requestInterrupts(com.sun.jna.Pointer, byte, int, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void requestInterrupts(Pointer interrupt_pointer, byte routing_module, int routing_pin, byte routing_analog_trigger, IntByReference status);
	/**
	 * Original signature : <code>void requestInterrupts(void*, uint8_t, uint32_t, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:16</i>
	 */
	public static native void requestInterrupts(Pointer interrupt_pointer, byte routing_module, int routing_pin, byte routing_analog_trigger, IntBuffer status);
	/**
	 * Original signature : <code>void attachInterruptHandler(void*, InterruptHandlerFunction, void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:18</i><br>
	 * @deprecated use the safer methods {@link #attachInterruptHandler(com.sun.jna.Pointer, edu.wpi.first.wpilibj.hal.HALLibrary.InterruptHandlerFunction, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #attachInterruptHandler(com.sun.jna.Pointer, edu.wpi.first.wpilibj.hal.HALLibrary.InterruptHandlerFunction, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void attachInterruptHandler(Pointer interrupt_pointer, HALLibrary.InterruptHandlerFunction handler, Pointer param, IntByReference status);
	/**
	 * Original signature : <code>void attachInterruptHandler(void*, InterruptHandlerFunction, void*, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:18</i>
	 */
	public static native void attachInterruptHandler(Pointer interrupt_pointer, HALLibrary.InterruptHandlerFunction handler, Pointer param, IntBuffer status);
	/**
	 * Original signature : <code>void setInterruptUpSourceEdge(void*, bool, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:20</i><br>
	 * @deprecated use the safer methods {@link #setInterruptUpSourceEdge(com.sun.jna.Pointer, byte, byte, java.nio.IntBuffer)} and {@link #setInterruptUpSourceEdge(com.sun.jna.Pointer, byte, byte, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setInterruptUpSourceEdge(Pointer interrupt_pointer, byte risingEdge, byte fallingEdge, IntByReference status);
	/**
	 * Original signature : <code>void setInterruptUpSourceEdge(void*, bool, bool, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Interrupts.h:20</i>
	 */
	public static native void setInterruptUpSourceEdge(Pointer interrupt_pointer, byte risingEdge, byte fallingEdge, IntBuffer status);
	/**
	 * Original signature : <code>void delayTicks(int32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Utilities.h:10</i>
	 */
	public static native void delayTicks(int ticks);
	/**
	 * Original signature : <code>void delayMillis(double)</code><br>
	 * <i>native declaration : target/native/include/HAL/Utilities.h:11</i>
	 */
	public static native void delayMillis(double ms);
	/**
	 * Original signature : <code>void delaySeconds(double)</code><br>
	 * <i>native declaration : target/native/include/HAL/Utilities.h:12</i>
	 */
	public static native void delaySeconds(double s);
	/**
	 * Original signature : <code>MUTEX_ID initializeMutex(uint32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:33</i>
	 */
	public static native Pointer initializeMutex(int flags);
	/**
	 * Original signature : <code>void deleteMutex(MUTEX_ID)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:34</i>
	 */
	public static native void deleteMutex(Pointer sem);
	/**
	 * Original signature : <code>int8_t takeMutex(MUTEX_ID, int32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:35</i>
	 */
	public static native byte takeMutex(Pointer sem, int timeout);
	/**
	 * Original signature : <code>int8_t giveMutex(MUTEX_ID)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:36</i>
	 */
	public static native byte giveMutex(Pointer sem);
	/**
	 * Original signature : <code>SEMAPHORE_ID initializeSemaphore(uint32_t, uint32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:38</i>
	 */
	public static native Pointer initializeSemaphore(int flags, int initial_value);
	/**
	 * Original signature : <code>void deleteSemaphore(SEMAPHORE_ID)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:39</i>
	 */
	public static native void deleteSemaphore(Pointer sem);
	/**
	 * Original signature : <code>int8_t takeSemaphore(SEMAPHORE_ID, int32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:40</i>
	 */
	public static native byte takeSemaphore(Pointer sem, int timeout);
	/**
	 * Original signature : <code>int8_t giveSemaphore(SEMAPHORE_ID)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:41</i>
	 */
	public static native byte giveSemaphore(Pointer sem);
	/**
	 * Original signature : <code>MULTIWAIT_ID initializeMultiWait()</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:43</i>
	 */
	public static native Pointer initializeMultiWait();
	/**
	 * Original signature : <code>void deleteMultiWait(MULTIWAIT_ID)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:44</i>
	 */
	public static native void deleteMultiWait(Pointer sem);
	/**
	 * Original signature : <code>int8_t takeMultiWait(MULTIWAIT_ID, int32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:45</i>
	 */
	public static native byte takeMultiWait(Pointer sem, int timeout);
	/**
	 * Original signature : <code>int8_t giveMultiWait(MULTIWAIT_ID)</code><br>
	 * <i>native declaration : target/native/include/HAL/Semaphore.h:46</i>
	 */
	public static native byte giveMultiWait(Pointer sem);
	/**
	 * Original signature : <code>TASK spawnTask(char*, int, int, int, FUNCPTR, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:47</i><br>
	 * @deprecated use the safer methods {@link #spawnTask(java.nio.ByteBuffer, int, int, int, edu.wpi.first.wpilibj.hal.HALLibrary.FUNCPTR, int, int, int, int, int, int, int, int, int, int)} and {@link #spawnTask(com.sun.jna.Pointer, int, int, int, edu.wpi.first.wpilibj.hal.HALLibrary.FUNCPTR, int, int, int, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	public static native NativeLongByReference spawnTask(Pointer name, int priority, int options, int stackSize, HALLibrary.FUNCPTR entryPt, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
	/**
	 * Original signature : <code>TASK spawnTask(char*, int, int, int, FUNCPTR, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:47</i>
	 */
	public static native NativeLongByReference spawnTask(ByteBuffer name, int priority, int options, int stackSize, HALLibrary.FUNCPTR entryPt, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
	/**
	 * Original signature : <code>STATUS restartTask(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:51</i>
	 */
	public static native int restartTask(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS deleteTask(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:52</i>
	 */
	public static native int deleteTask(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS isTaskReady(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:53</i>
	 */
	public static native int isTaskReady(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS isTaskSuspended(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:54</i>
	 */
	public static native int isTaskSuspended(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS suspendTask(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:55</i>
	 */
	public static native int suspendTask(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS resumeTask(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:56</i>
	 */
	public static native int resumeTask(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS verifyTaskID(TASK)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:57</i>
	 */
	public static native int verifyTaskID(NativeLongByReference task);
	/**
	 * Original signature : <code>STATUS setTaskPriority(TASK, int)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:58</i>
	 */
	public static native int setTaskPriority(NativeLongByReference task, int priority);
	/**
	 * Original signature : <code>STATUS getTaskPriority(TASK, int*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:59</i><br>
	 * @deprecated use the safer methods {@link #getTaskPriority(com.sun.jna.ptr.NativeLongByReference, java.nio.IntBuffer)} and {@link #getTaskPriority(com.sun.jna.ptr.NativeLongByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getTaskPriority(NativeLongByReference task, IntByReference priority);
	/**
	 * Original signature : <code>STATUS getTaskPriority(TASK, int*)</code><br>
	 * <i>native declaration : target/native/include/HAL/Task.h:59</i>
	 */
	public static native int getTaskPriority(NativeLongByReference task, IntBuffer priority);
	/**
	 * Original signature : <code>void* getPort(uint8_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:31</i>
	 */
	public static native Pointer getPort(byte pin);
	/**
	 * Original signature : <code>void* getPortWithModule(uint8_t, uint8_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:32</i>
	 */
	public static native Pointer getPortWithModule(byte module, byte pin);
	/**
	 * Original signature : <code>char* getHALErrorMessage(int32_t)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:33</i>
	 */
	public static native String getHALErrorMessage(int code);
	/**
	 * Original signature : <code>uint16_t getFPGAVersion(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:35</i><br>
	 * @deprecated use the safer methods {@link #getFPGAVersion(java.nio.IntBuffer)} and {@link #getFPGAVersion(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native short getFPGAVersion(IntByReference status);
	/**
	 * Original signature : <code>uint16_t getFPGAVersion(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:35</i>
	 */
	public static native short getFPGAVersion(IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getFPGARevision(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:36</i><br>
	 * @deprecated use the safer methods {@link #getFPGARevision(java.nio.IntBuffer)} and {@link #getFPGARevision(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getFPGARevision(IntByReference status);
	/**
	 * Original signature : <code>uint32_t getFPGARevision(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:36</i>
	 */
	public static native int getFPGARevision(IntBuffer status);
	/**
	 * Original signature : <code>uint32_t getFPGATime(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:37</i><br>
	 * @deprecated use the safer methods {@link #getFPGATime(java.nio.IntBuffer)} and {@link #getFPGATime(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getFPGATime(IntByReference status);
	/**
	 * Original signature : <code>uint32_t getFPGATime(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:37</i>
	 */
	public static native int getFPGATime(IntBuffer status);
	/**
	 * Original signature : <code>void setFPGALED(uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:39</i><br>
	 * @deprecated use the safer methods {@link #setFPGALED(int, java.nio.IntBuffer)} and {@link #setFPGALED(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native void setFPGALED(int state, IntByReference status);
	/**
	 * Original signature : <code>void setFPGALED(uint32_t, int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:39</i>
	 */
	public static native void setFPGALED(int state, IntBuffer status);
	/**
	 * Original signature : <code>int32_t getFPGALED(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:40</i><br>
	 * @deprecated use the safer methods {@link #getFPGALED(java.nio.IntBuffer)} and {@link #getFPGALED(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int getFPGALED(IntByReference status);
	/**
	 * Original signature : <code>int32_t getFPGALED(int32_t*)</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:40</i>
	 */
	public static native int getFPGALED(IntBuffer status);
	/**
	 * Original signature : <code>void FRC_NetworkCommunication_Reserve()</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:45</i>
	 */
	public static native void FRC_NetworkCommunication_Reserve();
	/**
	 * Original signature : <code>void NumericArrayResize()</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:47</i>
	 */
	public static native void NumericArrayResize();
	/**
	 * Original signature : <code>void RTSetCleanupProc()</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:48</i>
	 */
	public static native void RTSetCleanupProc();
	/**
	 * Original signature : <code>void EDVR_CreateReference()</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:49</i>
	 */
	public static native void EDVR_CreateReference();
	/**
	 * Original signature : <code>void Occur()</code><br>
	 * <i>native declaration : target/native/include/HAL/HAL.h:50</i>
	 */
	public static native void Occur();
	public static final GlobalDouble kDefaultWatchdogExpiration = new GlobalDouble(HALLibrary.JNA_NATIVE_LIB, "kDefaultWatchdogExpiration");
	public static final GlobalInt HAL_NO_WAIT = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_NO_WAIT");
	public static final GlobalInt HAL_WAIT_FOREVER = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_WAIT_FOREVER");
	public static final GlobalInt SEMAPHORE_Q_FIFO = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_Q_FIFO");
	public static final GlobalInt SEMAPHORE_Q_PRIORITY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_Q_PRIORITY");
	public static final GlobalInt SEMAPHORE_DELETE_SAFE = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_DELETE_SAFE");
	public static final GlobalInt SEMAPHORE_INVERSION_SAFE = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_INVERSION_SAFE");
	public static final GlobalInt SEMAPHORE_NO_WAIT = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_NO_WAIT");
	public static final GlobalInt SEMAPHORE_WAIT_FOREVER = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_WAIT_FOREVER");
	public static final GlobalInt SEMAPHORE_EMPTY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_EMPTY");
	public static final GlobalInt SEMAPHORE_FULL = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_FULL");
	public static final GlobalInt VXWORKS_FP_TASK = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "VXWORKS_FP_TASK");
	public static final GlobalInt HAL_objLib_OBJ_ID_ERROR = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_objLib_OBJ_ID_ERROR");
	public static final GlobalInt HAL_objLib_OBJ_DELETED = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_objLib_OBJ_DELETED");
	public static final GlobalInt HAL_taskLib_ILLEGAL_OPTIONS = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_taskLib_ILLEGAL_OPTIONS");
	public static final GlobalInt HAL_memLib_NOT_ENOUGH_MEMORY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_memLib_NOT_ENOUGH_MEMORY");
	public static final GlobalInt HAL_taskLib_ILLEGAL_PRIORITY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_taskLib_ILLEGAL_PRIORITY");
	public static final GlobalInt dio_kNumSystems = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "dio_kNumSystems");
	public static final GlobalInt solenoid_kNumDO7_0Elements = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "solenoid_kNumDO7_0Elements");
	public static final GlobalInt interrupt_kNumSystems = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "interrupt_kNumSystems");
	public static final GlobalInt kSystemClockTicksPerMicrosecond = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "kSystemClockTicksPerMicrosecond");

  //// INT HACK STUFF
  /// Analog
  // Float
	@Deprecated 
	public static native int getAnalogSampleRateIntHack(IntByReference status);
	public static native int getAnalogSampleRateIntHack(IntBuffer status);
	@Deprecated 
	public static native int getAnalogSampleRateWithModuleIntHack(byte module, IntByReference status);
    public static native int getAnalogSampleRateWithModuleIntHack(byte module, IntBuffer status);
	@Deprecated 
	public static native int getAnalogVoltageIntHack(Pointer analog_port_pointer, IntByReference status);
	public static native int getAnalogVoltageIntHack(Pointer analog_port_pointer, IntBuffer status);
	@Deprecated 
	public static native int getAnalogAverageVoltageIntHack(Pointer analog_port_pointer, IntByReference status);
	public static native int getAnalogAverageVoltageIntHack(Pointer analog_port_pointer, IntBuffer status);

  // Double
	@Deprecated 
	public static native void setAnalogSampleRateIntHack(int samplesPerSecond, IntByReference status);
	public static native void setAnalogSampleRateIntHack(int samplesPerSecond, IntBuffer status);
	@Deprecated 
	public static native void setAnalogSampleRateWithModuleIntHack(byte module, int samplesPerSecond, IntByReference status);
	public static native void setAnalogSampleRateWithModuleIntHack(byte module, int samplesPerSecond, IntBuffer status);
	@Deprecated 
	public static native int getAnalogVoltsToValueIntHack(Pointer analog_port_pointer, int voltage, IntByReference status);
	public static native int getAnalogVoltsToValueIntHack(Pointer analog_port_pointer, int voltage, IntBuffer status);
	@Deprecated 
	public static native void setAnalogTriggerLimitsVoltageIntHack(Pointer analog_trigger_pointer, int lower, int upper, IntByReference status);

	public static native void setAnalogTriggerLimitsVoltageIntHack(Pointer analog_trigger_pointer, int lower, int upper, IntBuffer status);
  
  /// PWM
  // Double
	@Deprecated 
	public static native void setPWMRateIntHack(int rate, IntByReference status);
	public static native void setPWMRateIntHack(int rate, IntBuffer status);
	@Deprecated 
	public static native void setPWMRateWithModuleIntHack(byte module, int rate, IntByReference status);
	public static native void setPWMRateWithModuleIntHack(byte module, int rate, IntBuffer status);
	@Deprecated 
	public static native void setPWMDutyCycleIntHack(Pointer pwmGenerator, int dutyCycle, IntByReference status);
	public static native void setPWMDutyCycleIntHack(Pointer pwmGenerator, int dutyCycle, IntBuffer status);
	@Deprecated 
	public static native void setPWMDutyCycleWithModuleIntHack(byte module, Pointer pwmGenerator, int dutyCycle, IntByReference status);
	public static native void setPWMDutyCycleWithModuleIntHack(byte module, Pointer pwmGenerator, int dutyCycle, IntBuffer status);
}
